<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/yashbhoomkar/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/yashbhoomkar/" rel="alternate" type="text/html" /><updated>2025-04-15T13:13:40+05:30</updated><id>http://localhost:4000/yashbhoomkar/feed.xml</id><title type="html">Pointer Pages</title><subtitle>A blog where I share intriguing tech projects, ideas, and experiments — from software to hardware.</subtitle><author><name>Yash Bhoomkar</name><email>bhoomkar04@gmail.com</email></author><entry><title type="html">Smart Expense Manager &amp;amp; Auto-Budgeting with Telegram + Gemini AI</title><link href="http://localhost:4000/yashbhoomkar/full-stack/smart-expense-manager/" rel="alternate" type="text/html" title="Smart Expense Manager &amp;amp; Auto-Budgeting with Telegram + Gemini AI" /><published>2025-04-05T11:00:00+05:30</published><updated>2025-04-05T11:00:00+05:30</updated><id>http://localhost:4000/yashbhoomkar/full-stack/smart-expense-manager</id><content type="html" xml:base="http://localhost:4000/yashbhoomkar/full-stack/smart-expense-manager/">&lt;h2 id=&quot;-introduction&quot;&gt;💡 Introduction&lt;/h2&gt;

&lt;p&gt;Managing expenses shouldn’t feel like managing a spreadsheet. That’s what drove the idea behind &lt;strong&gt;Smart Expense Manager&lt;/strong&gt; — a conversational, intelligent solution for personal and group expense tracking, built using &lt;strong&gt;Telegram&lt;/strong&gt;, &lt;strong&gt;Razorpay&lt;/strong&gt;, &lt;strong&gt;Gemini AI&lt;/strong&gt;, and &lt;strong&gt;MongoDB&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This was my hackathon entry for a software innovation challenge — and it turned into one of the most fun and useful projects I’ve built!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-what-the-system-does&quot;&gt;🧠 What the System Does&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;“A Telegram message is all it takes.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This smart assistant helps users:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;📥 Log expenses easily from chat&lt;/li&gt;
  &lt;li&gt;👥 Split bills with friends in real-time&lt;/li&gt;
  &lt;li&gt;🤖 Use AI to suggest budgets based on spending&lt;/li&gt;
  &lt;li&gt;💰 Handle payments using Razorpay&lt;/li&gt;
  &lt;li&gt;📲 Get alerts via SMS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All without ever leaving Telegram.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;️-tech-stack&quot;&gt;🛠️ Tech Stack&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Layer&lt;/th&gt;
      &lt;th&gt;Stack Used&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Frontend&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Telegram Chat UI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Backend&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Node.js + Express&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;AI Engine&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Gemini API (Google AI)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Database&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;MongoDB Atlas&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Payments&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Razorpay Integration&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Alerts&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Twilio SMS / Bot API&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-architecture-overview&quot;&gt;🧱 Architecture Overview&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;User sends command&lt;/strong&gt; to the Telegram bot (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/add&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/split&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/view&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/suggest&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Bot sends the data to a &lt;strong&gt;Node.js backend&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;User data, group metadata, and expenses are stored in &lt;strong&gt;MongoDB&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;The backend:
    &lt;ul&gt;
      &lt;li&gt;Calls &lt;strong&gt;Gemini AI&lt;/strong&gt; to suggest budgeting categories and limits&lt;/li&gt;
      &lt;li&gt;Calls &lt;strong&gt;Razorpay API&lt;/strong&gt; to send payment links if needed&lt;/li&gt;
      &lt;li&gt;Sends SMS reminders through &lt;strong&gt;Twilio&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;User receives updates — budget suggestions, summaries, and payment confirmations — right inside Telegram.&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-core-features&quot;&gt;🔑 Core Features&lt;/h2&gt;

&lt;h3 id=&quot;1--telegram-chat-bot&quot;&gt;1. 💬 Telegram Chat Bot&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Intuitive chat-first interface&lt;/li&gt;
  &lt;li&gt;Expense logging in seconds&lt;/li&gt;
  &lt;li&gt;Group creation &amp;amp; invite support&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2--gemini-ai-budgeting&quot;&gt;2. 🧠 Gemini AI Budgeting&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Analyzes past spend data&lt;/li&gt;
  &lt;li&gt;Recommends monthly budget goals&lt;/li&gt;
  &lt;li&gt;Adjusts based on user behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3--razorpay-integration&quot;&gt;3. 💸 Razorpay Integration&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Real-time request-to-pay system&lt;/li&gt;
  &lt;li&gt;Pings payer via UPI or card&lt;/li&gt;
  &lt;li&gt;Confirms payments instantly&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;4--alerts-via-sms--telegram&quot;&gt;4. 📢 Alerts via SMS / Telegram&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sends transaction confirmations&lt;/li&gt;
  &lt;li&gt;Daily/weekly budget digests&lt;/li&gt;
  &lt;li&gt;Payment reminders&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-example-use-case&quot;&gt;💼 Example Use Case&lt;/h2&gt;

&lt;p&gt;You enter:
```bash
/split Pizza 1200 with @rohan @raj @meena
➡️ The bot:&lt;/p&gt;

&lt;p&gt;Splits amount ₹300 each&lt;/p&gt;

&lt;p&gt;Sends Razorpay requests&lt;/p&gt;

&lt;p&gt;Logs in MongoDB&lt;/p&gt;

&lt;p&gt;Notifies users via SMS + bot chat&lt;/p&gt;

&lt;p&gt;🔮 Future Scope
Voice-command support with Google Assistant&lt;/p&gt;

&lt;p&gt;Expense forecasting with ML&lt;/p&gt;

&lt;p&gt;Integration with bank APIs&lt;/p&gt;

&lt;p&gt;Android/iOS native companion app&lt;/p&gt;

&lt;p&gt;Leaderboard of budgeters (gamification)&lt;/p&gt;

&lt;p&gt;✨ Takeaway
This project helped me explore:&lt;/p&gt;

&lt;p&gt;Real-time APIs and integrations&lt;/p&gt;

&lt;p&gt;Multi-user concurrency via chatbots&lt;/p&gt;

&lt;p&gt;Payment flow design&lt;/p&gt;

&lt;p&gt;AI-in-the-loop systems&lt;/p&gt;

&lt;p&gt;It’s the perfect example of how GenAI + full-stack dev can create delightful user experiences — that are actually useful.&lt;/p&gt;</content><author><name>Yash Bhoomkar</name><email>bhoomkar04@gmail.com</email></author><category term="full-stack" /><category term="telegram bot" /><category term="gemini" /><category term="razorpay" /><category term="mongodb" /><category term="ai" /><category term="expense tracker" /><category term="budgeting" /><summary type="html">💡 Introduction</summary></entry><entry><title type="html">Process Scheduling Algorithms in Operating Systems</title><link href="http://localhost:4000/yashbhoomkar/operating%20systems/process-scheduling-algorithms/" rel="alternate" type="text/html" title="Process Scheduling Algorithms in Operating Systems" /><published>2025-02-15T09:00:00+05:30</published><updated>2025-02-15T09:00:00+05:30</updated><id>http://localhost:4000/yashbhoomkar/operating%20systems/process-scheduling-algorithms</id><content type="html" xml:base="http://localhost:4000/yashbhoomkar/operating%20systems/process-scheduling-algorithms/">&lt;h2 id=&quot;-introduction&quot;&gt;🧠 Introduction&lt;/h2&gt;

&lt;p&gt;In a multitasking operating system, &lt;strong&gt;process scheduling&lt;/strong&gt; is the key to managing how the CPU is shared among multiple processes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A scheduler decides &lt;strong&gt;which process gets the CPU&lt;/strong&gt;, for how long, and in what order.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This blog breaks down the &lt;strong&gt;most common scheduling algorithms&lt;/strong&gt; in OS: FIFO, Round Robin, SJF, Priority, and Multilevel Queue.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;️-terminologies-first&quot;&gt;⚙️ Terminologies First&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Burst Time (BT)&lt;/strong&gt;: Time a process needs on the CPU&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Arrival Time (AT)&lt;/strong&gt;: When the process enters the ready queue&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Waiting Time (WT)&lt;/strong&gt;: Time process waits in the queue&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Turnaround Time (TAT)&lt;/strong&gt;: Time from arrival to completion&lt;br /&gt;
&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TAT = Completion Time - Arrival Time&lt;/code&gt;&lt;br /&gt;
&amp;gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WT = TAT - Burst Time&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1️⃣-fifo--fcfs-first-come-first-serve&quot;&gt;1️⃣ FIFO / FCFS (First Come First Serve)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Concept&lt;/strong&gt;: Processes are scheduled in the order they arrive.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Pros&lt;/th&gt;
      &lt;th&gt;Cons&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Simple&lt;/td&gt;
      &lt;td&gt;Convoy effect: long processes delay short ones&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Fair in order&lt;/td&gt;
      &lt;td&gt;Poor average waiting time&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;📝 Example:
Arrival: P1, P2, P3 BT: 4 3 2 → Order: P1 → P2 → P3&lt;/p&gt;

&lt;p&gt;yaml
Copy
Edit&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;2️⃣-sjf-shortest-job-first&quot;&gt;2️⃣ SJF (Shortest Job First)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Concept&lt;/strong&gt;: Schedule the process with the &lt;strong&gt;smallest burst time&lt;/strong&gt; first.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Pros&lt;/th&gt;
      &lt;th&gt;Cons&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Optimal avg WT&lt;/td&gt;
      &lt;td&gt;Starvation of long processes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Requires BT prediction&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;📝 Example:
BT: P1=6, P2=2, P3=1 → Order: P3 → P2 → P1&lt;/p&gt;

&lt;p&gt;yaml
Copy
Edit&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;3️⃣-round-robin-rr&quot;&gt;3️⃣ Round Robin (RR)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Concept&lt;/strong&gt;: Each process gets a &lt;strong&gt;fixed time slice&lt;/strong&gt; (quantum), then moves to the back of the queue.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Pros&lt;/th&gt;
      &lt;th&gt;Cons&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Fair CPU sharing&lt;/td&gt;
      &lt;td&gt;Depends on quantum size&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Great for time-sharing&lt;/td&gt;
      &lt;td&gt;High context switch overhead&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;📝 Example (Quantum = 2):&lt;/p&gt;

&lt;p&gt;Queue: P1=4, P2=3, P3=5
Cycle: P1(2) → P2(2) → P3(2) → P1(2) → P2(1) → P3(3)&lt;/p&gt;

&lt;p&gt;yaml
Copy
Edit&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;4️⃣-priority-scheduling&quot;&gt;4️⃣ Priority Scheduling&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Concept&lt;/strong&gt;: Each process has a priority. Highest priority runs first.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Pros&lt;/th&gt;
      &lt;th&gt;Cons&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Flexible control&lt;/td&gt;
      &lt;td&gt;Starvation of low priority&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Great for real-time apps&lt;/td&gt;
      &lt;td&gt;Aging needed to prevent starvation&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;📝 Example:
Priorities: P1=3, P2=1, P3=2 → Order: P2 → P3 → P1&lt;/p&gt;

&lt;p&gt;yaml
Copy
Edit&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;5️⃣-multilevel-queue-scheduling&quot;&gt;5️⃣ Multilevel Queue Scheduling&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Concept&lt;/strong&gt;: Processes are grouped (interactive, batch, etc.) and each group has its own scheduling algorithm.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each queue has different priority.&lt;/li&gt;
  &lt;li&gt;No process moves between queues (static).&lt;/li&gt;
  &lt;li&gt;RR can be used inside queues.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🧠 Useful for systems with &lt;strong&gt;distinguished process types&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-comparison-table&quot;&gt;📊 Comparison Table&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Algorithm&lt;/th&gt;
      &lt;th&gt;Preemptive&lt;/th&gt;
      &lt;th&gt;Starvation Possible&lt;/th&gt;
      &lt;th&gt;Best For&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;FCFS&lt;/td&gt;
      &lt;td&gt;❌&lt;/td&gt;
      &lt;td&gt;❌&lt;/td&gt;
      &lt;td&gt;Simplicity&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;SJF&lt;/td&gt;
      &lt;td&gt;❌/✅&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
      &lt;td&gt;Batch systems&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Round Robin&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
      &lt;td&gt;❌&lt;/td&gt;
      &lt;td&gt;Time-sharing systems&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Priority&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
      &lt;td&gt;✅&lt;/td&gt;
      &lt;td&gt;Real-time systems&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Multilevel&lt;/td&gt;
      &lt;td&gt;✅/❌&lt;/td&gt;
      &lt;td&gt;Depends&lt;/td&gt;
      &lt;td&gt;Complex environments&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-pro-tip-visualizing-with-gantt-charts&quot;&gt;🧪 Pro Tip: Visualizing With Gantt Charts&lt;/h2&gt;

&lt;p&gt;When practicing scheduling questions, always draw a &lt;strong&gt;Gantt chart&lt;/strong&gt; to understand execution flow and calculate:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Completion Time (CT)&lt;/li&gt;
  &lt;li&gt;Waiting Time (WT)&lt;/li&gt;
  &lt;li&gt;Turnaround Time (TAT)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-final-thoughts&quot;&gt;💡 Final Thoughts&lt;/h2&gt;

&lt;p&gt;Understanding process scheduling is &lt;strong&gt;core to operating systems&lt;/strong&gt; and is often asked in interviews and exams.&lt;/p&gt;

&lt;p&gt;Each algorithm is designed for specific use cases — there’s no one-size-fits-all. It’s all about choosing the right tool for the job!&lt;/p&gt;

&lt;p&gt;Want a post covering &lt;strong&gt;Deadlocks&lt;/strong&gt;, &lt;strong&gt;Memory Management&lt;/strong&gt;, or &lt;strong&gt;Page Replacement Algorithms&lt;/strong&gt; next? Let me know 💡&lt;/p&gt;</content><author><name>Yash Bhoomkar</name><email>bhoomkar04@gmail.com</email></author><category term="operating systems" /><category term="os" /><category term="scheduling" /><category term="round robin" /><category term="fifo" /><category term="sjf" /><category term="priority" /><category term="cpu" /><category term="interview" /><summary type="html">🧠 Introduction</summary></entry><entry><title type="html">My Capgemini Internship Experience</title><link href="http://localhost:4000/yashbhoomkar/full-stack/capgemini-internship-experience/" rel="alternate" type="text/html" title="My Capgemini Internship Experience" /><published>2025-02-13T09:30:00+05:30</published><updated>2025-02-13T09:30:00+05:30</updated><id>http://localhost:4000/yashbhoomkar/full-stack/capgemini-internship-experience</id><content type="html" xml:base="http://localhost:4000/yashbhoomkar/full-stack/capgemini-internship-experience/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;From October 2024 to February 2025, I had the opportunity to intern with &lt;strong&gt;Capgemini’s GenAI team&lt;/strong&gt; in Pune. Over the course of 4 months, I worked on building a &lt;strong&gt;unit test case curator for C and C++ codebases&lt;/strong&gt; that leveraged &lt;strong&gt;Clang AST, Language Servers (LSP), and Generative AI&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The goal of the project was to boost developer productivity by creating a tool that could automatically generate meaningful unit test cases for any C/C++ function by analyzing the source code and passing relevant context to Capgemini’s GenAI engine.&lt;/p&gt;

&lt;p&gt;Here’s a chronological log of the milestones achieved during my internship.&lt;/p&gt;

&lt;h2 id=&quot;-timeline-of-work&quot;&gt;📅 Timeline of Work&lt;/h2&gt;

&lt;h3 id=&quot;-14--10--24--onboarding-and-device-collection&quot;&gt;✅ 14 / 10 / 24 — Onboarding and Device Collection&lt;/h3&gt;
&lt;p&gt;On my first day, I completed all formalities related to onboarding. I was issued my work laptop and introduced to internal systems and tools at Capgemini.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-20--10--24--orientation-and-hr-activities&quot;&gt;✅ 20 / 10 / 24 — Orientation and HR Activities&lt;/h3&gt;
&lt;p&gt;This day was dedicated to HR inductions, compliance training, and learning about Capgemini’s core values and culture. It was great to meet fellow interns and understand the scope of various verticals.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-24--10--24--manager-assignment-process&quot;&gt;✅ 24 / 10 / 24 — Manager Assignment Process&lt;/h3&gt;
&lt;p&gt;I was officially assigned to the &lt;strong&gt;GenAI team&lt;/strong&gt;. I received the name of my reporting manager and was added to internal channels and sprint boards.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-01--11--24--project-knowledge-transfer-kt&quot;&gt;✅ 01 / 11 / 24 — Project Knowledge Transfer (KT)&lt;/h3&gt;
&lt;p&gt;A colleague walked me through an existing prototype and explained Capgemini’s internal GenAI socket. We discussed expectations and the current state of the tooling.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-05--11--24--research-regex-based-parsing&quot;&gt;✅ 05 / 11 / 24 — Research: Regex-based Parsing&lt;/h3&gt;
&lt;p&gt;I initially explored using regular expressions to parse code and extract function details. This turned out to be fragile and error-prone for nested or complex C/C++ structures.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-11--11--24--research-genai-based-context-extraction&quot;&gt;✅ 11 / 11 / 24 — Research: GenAI-Based Context Extraction&lt;/h3&gt;
&lt;p&gt;Shifted focus toward using &lt;strong&gt;GenAI to understand code context&lt;/strong&gt; instead of regexes. I started exploring how semantic understanding could make the tool more intelligent.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-15--11--24--manager-sync-my-approach-using-ast&quot;&gt;✅ 15 / 11 / 24 — Manager Sync: My Approach Using AST&lt;/h3&gt;
&lt;p&gt;I pitched my idea of using &lt;strong&gt;Abstract Syntax Trees (AST)&lt;/strong&gt; via &lt;strong&gt;Clang tooling&lt;/strong&gt; to parse C/C++ functions and extract precise context. The manager gave green light to proceed.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-21--11--24--team-meeting-tech-architecture&quot;&gt;✅ 21 / 11 / 24 — Team Meeting: Tech Architecture&lt;/h3&gt;
&lt;p&gt;Presented a detailed technical architecture to the broader GenAI team, discussing how we’d gather function metadata, handle includes, dependencies, and socket communication.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-28--11--24--presentation-my-approach-walkthrough&quot;&gt;✅ 28 / 11 / 24 — Presentation: My Approach Walkthrough&lt;/h3&gt;
&lt;p&gt;I gave a structured walkthrough of my AST-based context extractor, demonstrating early results and how we’d connect it with the GenAI engine for test case generation.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-01--12--24--research-clang-ast&quot;&gt;✅ 01 / 12 / 24 — Research: Clang AST&lt;/h3&gt;
&lt;p&gt;Deep-dived into Clang’s AST APIs, experimented with traversal techniques to extract function arguments, local variables, return types, and dependencies.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-10--12--24--mvp-presentation&quot;&gt;✅ 10 / 12 / 24 — MVP Presentation&lt;/h3&gt;
&lt;p&gt;Presented the MVP of the &lt;strong&gt;Unit Test Curator Tool&lt;/strong&gt; to my manager. It could now extract clean context blocks for individual functions and output them as structured data.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-15--12--24--genai-socket-update&quot;&gt;✅ 15 / 12 / 24 — GenAI Socket Update&lt;/h3&gt;
&lt;p&gt;Collaborated with the core team to modify the socket protocol to better support test case suggestions and handle varied output lengths from the GenAI engine.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-01--01--25--mvp-integration-with-code-tester&quot;&gt;✅ 01 / 01 / 25 — MVP Integration with Code Tester&lt;/h3&gt;
&lt;p&gt;We integrated the context-extraction module with Capgemini’s internal code-testing framework. Test cases were now being generated in real-time via the GenAI socket.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-15--01--25--final-tool-integration-with-genai-socket&quot;&gt;✅ 15 / 01 / 25 — Final Tool Integration with GenAI Socket&lt;/h3&gt;
&lt;p&gt;The full pipeline was in place: from AST context extraction → passing to GenAI → receiving test cases → injecting into testing scaffolds. The tool was ready for team-wide use.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-01--02--25--final-testing--debugging&quot;&gt;✅ 01 / 02 / 25 — Final Testing &amp;amp; Debugging&lt;/h3&gt;
&lt;p&gt;Conducted thorough debugging and ran validations on 100+ C/C++ functions. Edge cases, macros, and template handling were tested and optimized.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-10--02--25--final-demo-to-senior-director&quot;&gt;✅ 10 / 02 / 25 — Final Demo to Senior Director&lt;/h3&gt;
&lt;p&gt;I showcased the tool in a final demo session to Capgemini’s Senior Director. Received great feedback on the real-world productivity boost the tool offered to developers.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;-13--02--25--last-day-and-device-handover&quot;&gt;✅ 13 / 02 / 25 — Last Day and Device Handover&lt;/h3&gt;
&lt;p&gt;Wrapped up all documentation, submitted my project report, and returned the device. A wonderful learning journey came to an end. ✨&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-tech-stack--tools-used&quot;&gt;🧠 Tech Stack &amp;amp; Tools Used&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Languages&lt;/strong&gt;: Python, C++&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Compiler Tools&lt;/strong&gt;: Clang, LibTooling&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AST Parsing&lt;/strong&gt;: Clang Python Bindings&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GenAI Integration&lt;/strong&gt;: Capgemini GenAI Socket&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Code Analysis&lt;/strong&gt;: Language Server Protocol (LSP)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Internal Testing Frameworks&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;This internship at Capgemini was more than just a corporate stint—it was an intense learning experience. I got hands-on with real-world GenAI applications, explored compiler internals, and improved my understanding of scalable tooling for enterprise codebases.&lt;/p&gt;

&lt;p&gt;The project taught me how traditional techniques like ASTs can work hand-in-hand with next-gen GenAI models to solve developer problems more intelligently.&lt;/p&gt;

&lt;p&gt;I’m incredibly grateful to my manager and team for the support and the freedom to explore ideas. Looking forward to what comes next! 🚀&lt;/p&gt;</content><author><name>Yash Bhoomkar</name><email>bhoomkar04@gmail.com</email></author><category term="full-stack" /><category term="genai" /><category term="clang" /><category term="ast" /><category term="capgemini" /><category term="productivity" /><category term="python" /><category term="lsp" /><category term="unit-testing" /><summary type="html">Introduction</summary></entry><entry><title type="html">Smart Email Routing</title><link href="http://localhost:4000/yashbhoomkar/full-stack/smart-email-routing/" rel="alternate" type="text/html" title="Smart Email Routing" /><published>2025-01-18T09:30:45+05:30</published><updated>2025-01-18T09:30:45+05:30</updated><id>http://localhost:4000/yashbhoomkar/full-stack/smart-email-routing</id><content type="html" xml:base="http://localhost:4000/yashbhoomkar/full-stack/smart-email-routing/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In the age of overflowing inboxes, email triaging can become a real pain—especially when you’re part of a fast-moving organization. Manually sorting and forwarding emails can waste hours every week. I decided to automate this task by building a &lt;strong&gt;Smart Email Routing System&lt;/strong&gt; using the &lt;strong&gt;Gmail API&lt;/strong&gt; and the &lt;strong&gt;LLaMA 3.2 model from Ollama&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The goal?&lt;br /&gt;
Build a GenAI-powered bot that can:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Read incoming emails.&lt;/li&gt;
  &lt;li&gt;Understand their context using LLaMA.&lt;/li&gt;
  &lt;li&gt;Decide &lt;strong&gt;who&lt;/strong&gt; the email should go to.&lt;/li&gt;
  &lt;li&gt;Determine &lt;strong&gt;how urgent&lt;/strong&gt; it is.&lt;/li&gt;
  &lt;li&gt;Route it intelligently—no human involved.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s walk through how this system works.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How It Works&lt;/h2&gt;

&lt;p&gt;The architecture is pretty straightforward, but very powerful. Here’s the breakdown:&lt;/p&gt;

&lt;h3 id=&quot;-1-fetch-emails-using-gmail-api&quot;&gt;📨 1. Fetch Emails using Gmail API&lt;/h3&gt;
&lt;p&gt;Using OAuth 2.0 and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google-api-python-client&lt;/code&gt;, the system:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Authenticates securely using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;token.json&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Connects to the Gmail inbox.&lt;/li&gt;
  &lt;li&gt;Fetches all &lt;strong&gt;unread&lt;/strong&gt; emails from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INBOX&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Extracts the subject, sender, and message body (MIME decoded).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-2-pass-email-to-llama-32-via-ollama&quot;&gt;🧠 2. Pass Email to LLaMA 3.2 via Ollama&lt;/h3&gt;
&lt;p&gt;Once the email is fetched:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We combine the subject + body into a prompt.&lt;/li&gt;
  &lt;li&gt;Send it to a &lt;strong&gt;locally running LLaMA 3.2 model via Ollama CLI&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The prompt asks LLaMA to return:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;To whom should this email be routed?&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;What is the severity level?&lt;/code&gt; (Low / Medium / High / Urgent)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;-3-parse-the-response&quot;&gt;🧾 3. Parse the Response&lt;/h3&gt;
&lt;p&gt;The model returns a JSON-like output such as:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;route_to&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Legal Team&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;severity&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;High&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This output is parsed and used in the next step.&lt;/p&gt;

&lt;h3 id=&quot;️-4-route-and-tag-the-email&quot;&gt;🏷️ 4. Route and Tag the Email&lt;/h3&gt;
&lt;p&gt;Based on the model’s output:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Apply appropriate Gmail labels (e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_legal&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;severity_high&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Optionally forward the email to the correct department&lt;/li&gt;
  &lt;li&gt;Archive or move it as needed&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;implementation-code&quot;&gt;Implementation Code&lt;/h2&gt;

&lt;p&gt;Here’s the full implementation for this project:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email.mime.text&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MIMEText&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleapiclient.discovery&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;google_auth_oauthlib.flow&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InstalledAppFlow&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;google.auth.transport.requests&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Request&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;google.oauth2.credentials&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Credentials&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Define the scopes needed for Gmail API
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCOPES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https://www.googleapis.com/auth/gmail.modify&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate_gmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
    Authenticate with Gmail API using OAuth2
    &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;token.json&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Credentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_authorized_user_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;token.json&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expired&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;refresh_token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;flow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InstalledAppFlow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;from_client_secrets_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;credentials.json&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCOPES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run_local_server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;token.json&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;gmail&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;creds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_email_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
    Extract email content from message ID
    &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;full&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(No Subject)&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Unknown&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;parts&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;body_bytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;urlsafe_b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;utf-8&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_id&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;analyze_with_llama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
    Send email content to LLaMA 3.2 via Ollama CLI for analysis
    &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;You are a smart email assistant.

Classify the following email and respond in JSON format with:
1. Who it should be routed to.
2. Severity level: Low, Medium, High, or Urgent.

Email:
Subject: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
Body: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Execute Ollama command - adjust model name as needed
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subprocess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ollama&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;llama3.2&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;capture_output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Extract JSON from response
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Find JSON-like content in the output
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;start_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;end_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rfind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end_idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;json_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;route_to&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Unknown&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Medium&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Error parsing LLaMA response: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;route_to&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Unknown&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Medium&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_routing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routing_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
    Apply routing decisions to email (labels, forwarding, etc.)
    &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;route_to&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routing_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;route_to&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Unknown&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;severity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routing_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Medium&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Create labels if they don&apos;t exist
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;labels_to_apply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;to_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;route_to&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;severity_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;existing_labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;existing_label_names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;existing_labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label_name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels_to_apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label_name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;existing_label_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;label_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Get label IDs for application
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;updated_labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;label_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updated_labels&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels_to_apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Apply labels
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;modify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;addLabelIds&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;removeLabelIds&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;UNREAD&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Optional: Forward email based on routing
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# This part would connect to your forwarding logic
&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;applied_labels&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels_to_apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;route_to&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routing_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;route_to&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routing_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
    Main function to orchestrate email processing
    &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Authenticate
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate_gmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# Get unread emails
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;is:unread in:inbox&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;No unread messages found.&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Found &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; unread emails. Processing...&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# Get email content
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;email_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_email_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# Analyze with LLaMA
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;routing_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;analyze_with_llama&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# Apply routing decisions
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply_routing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;routing_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Processed email: &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;  → Routed to: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;route_to&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;  → Severity: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;  → Labels: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;, &lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;applied_labels&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sample-prompt-sent-to-llama&quot;&gt;Sample Prompt Sent to LLaMA&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;You are a smart email assistant.

Classify the following email and respond in JSON format with:
1. Who it should be routed to.
2. Severity level: Low, Medium, High, or Urgent.

Email:
Subject: 
Body: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This zero-shot prompt approach worked surprisingly well!&lt;/p&gt;

&lt;h2 id=&quot;why-not-just-rule-based-filters&quot;&gt;Why Not Just Rule-Based Filters?&lt;/h2&gt;

&lt;p&gt;Rule-based filters (like if subject contains “invoice” then forward) are brittle. They:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Miss context.&lt;/li&gt;
  &lt;li&gt;Fail on misspellings or vague language.&lt;/li&gt;
  &lt;li&gt;Don’t scale with varied email types.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using LLaMA lets us handle:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Semantics (not just keywords)&lt;/li&gt;
  &lt;li&gt;Complex business logic&lt;/li&gt;
  &lt;li&gt;Adaptable rules based on intent&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;This project showed me how GenAI can elegantly solve boring but critical workflows. With just:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A Gmail API connection,&lt;/li&gt;
  &lt;li&gt;A local LLaMA model (via Ollama),&lt;/li&gt;
  &lt;li&gt;And some smart prompting…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…I built a system that’s capable of understanding and organizing email like a human assistant—but faster, and without ever needing coffee ☕.&lt;/p&gt;

&lt;p&gt;Next steps?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;🔁 Add scheduling&lt;/li&gt;
  &lt;li&gt;📊 Log and visualize routing stats&lt;/li&gt;
  &lt;li&gt;📥 Maybe even reply to some emails automatically…&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yash Bhoomkar</name><email>bhoomkar04@gmail.com</email></author><category term="full-stack" /><category term="node js" /><category term="security headers" /><category term="web app" /><category term="helmet" /><category term="production" /><summary type="html">Introduction</summary></entry><entry><title type="html">Understanding Recursion and Stack Frames</title><link href="http://localhost:4000/yashbhoomkar/dsa/recursion-and-stackframes/" rel="alternate" type="text/html" title="Understanding Recursion and Stack Frames" /><published>2024-12-20T11:00:00+05:30</published><updated>2024-12-20T11:00:00+05:30</updated><id>http://localhost:4000/yashbhoomkar/dsa/recursion-and-stackframes</id><content type="html" xml:base="http://localhost:4000/yashbhoomkar/dsa/recursion-and-stackframes/">&lt;h2 id=&quot;-introduction&quot;&gt;🧠 Introduction&lt;/h2&gt;

&lt;p&gt;Recursion is one of the most powerful — yet often misunderstood — concepts in computer science. It’s elegant, expressive, and frequently used in problems involving trees, graphs, backtracking, and more.&lt;/p&gt;

&lt;p&gt;But what &lt;em&gt;really&lt;/em&gt; happens under the hood when a function calls itself?&lt;/p&gt;

&lt;p&gt;The answer lies in how &lt;strong&gt;stack frames&lt;/strong&gt; work.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-what-is-recursion&quot;&gt;🔁 What is Recursion?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A function that calls itself in order to solve a smaller version of a problem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It has two main parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Base Case&lt;/strong&gt;: When to stop&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Recursive Case&lt;/strong&gt;: When the function calls itself&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;📝 Example: Factorial&lt;br /&gt;
```python
def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)
Calling factorial(3) leads to:&lt;/p&gt;

&lt;p&gt;matlab
Copy
Edit
factorial(3) → 3 * factorial(2)
              → 3 * (2 * factorial(1))
              → 3 * (2 * (1 * factorial(0)))
              → 3 * 2 * 1 * 1 = 6
🧱 The Role of Stack Frames
Every time a function is called — including recursive calls — it gets its own stack frame:&lt;/p&gt;

&lt;p&gt;A stack frame contains:
Function parameters
Local variables
Return address
This stack is called the call stack.&lt;/p&gt;

&lt;p&gt;🧮 Visualizing the Stack for factorial(3)
As the function calls build up:&lt;/p&gt;

&lt;p&gt;scss
Copy
Edit
TOP
factorial(3)
factorial(2)
factorial(1)
factorial(0)
BOTTOM
Each function waits for the next one to return a value.&lt;/p&gt;

&lt;p&gt;Once the base case is hit (factorial(0)), the stack unwinds:&lt;/p&gt;

&lt;p&gt;sql
Copy
Edit
factorial(0) returns 1
factorial(1) returns 1 * 1 = 1
factorial(2) returns 2 * 1 = 2
factorial(3) returns 3 * 2 = 6
⚠️ Why Stack Overflow Happens
If your recursion has no base case or goes too deep, the call stack runs out of space:&lt;/p&gt;

&lt;p&gt;python
Copy
Edit
def infinite():
    return infinite()
❌ This results in a stack overflow error, because the system can’t allocate any more stack frames.&lt;/p&gt;

&lt;p&gt;💡 Tail Recursion Optimization (TCO)
Some languages (like Lisp, Scheme, or optimized C compilers) support Tail Call Optimization where tail-recursive functions reuse the same stack frame.&lt;/p&gt;

&lt;p&gt;Python and Java do not support TCO.&lt;/p&gt;

&lt;p&gt;📊 Iterative vs Recursive
Feature	Recursion	Iteration
Simpler logic	Often yes	Sometimes complex
Memory usage	Uses call stack	Uses loop variables
Speed	Can be slower	Usually faster
📘 Common Recursive Problems
Factorial, Fibonacci&lt;/p&gt;

&lt;p&gt;Tree traversals (DFS)&lt;/p&gt;

&lt;p&gt;Backtracking (N-Queens, Maze)&lt;/p&gt;

&lt;p&gt;Divide and conquer (Merge Sort, Quick Sort)&lt;/p&gt;

&lt;p&gt;🧠 Final Thoughts
Recursion is not magic — it’s just functions stacked on top of each other until a base case is hit.&lt;/p&gt;

&lt;p&gt;Understanding the call stack is the key to mastering recursion. With that mental model, recursive problems become much easier to debug and optimize.&lt;/p&gt;

&lt;p&gt;Let me know if you’d like a visual animation or stack simulation in JavaScript for this topic!&lt;/p&gt;</content><author><name>Yash Bhoomkar</name><email>bhoomkar04@gmail.com</email></author><category term="dsa" /><category term="recursion" /><category term="stack" /><category term="call stack" /><category term="memory" /><category term="dsa" /><summary type="html">🧠 Introduction</summary></entry><entry><title type="html">What are WebSockets? Explained Simply</title><link href="http://localhost:4000/yashbhoomkar/networking/what-are-websockets/" rel="alternate" type="text/html" title="What are WebSockets? Explained Simply" /><published>2024-12-01T09:00:00+05:30</published><updated>2024-12-01T09:00:00+05:30</updated><id>http://localhost:4000/yashbhoomkar/networking/what-are-websockets</id><content type="html" xml:base="http://localhost:4000/yashbhoomkar/networking/what-are-websockets/">&lt;h2 id=&quot;-introduction&quot;&gt;🧠 Introduction&lt;/h2&gt;

&lt;p&gt;Have you ever used a chat app, live score update site, or real-time collaboration tool like Google Docs?&lt;/p&gt;

&lt;p&gt;Chances are, &lt;strong&gt;WebSockets&lt;/strong&gt; were involved.&lt;/p&gt;

&lt;p&gt;WebSockets allow real-time, two-way communication between a browser (or client) and a server — something traditional HTTP was never designed for.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-what-is-a-websocket&quot;&gt;🧪 What is a WebSocket?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;strong&gt;WebSocket&lt;/strong&gt; is a communication protocol that enables &lt;strong&gt;persistent&lt;/strong&gt;, &lt;strong&gt;bi-directional&lt;/strong&gt;, and &lt;strong&gt;full-duplex&lt;/strong&gt; communication between a client and server over a single &lt;strong&gt;TCP&lt;/strong&gt; connection.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-traditional-http-vs-websocket&quot;&gt;🔁 Traditional HTTP vs WebSocket&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Feature&lt;/th&gt;
      &lt;th&gt;HTTP&lt;/th&gt;
      &lt;th&gt;WebSocket&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Request-Response&lt;/td&gt;
      &lt;td&gt;Client sends, server replies&lt;/td&gt;
      &lt;td&gt;Bi-directional messages&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Connection Type&lt;/td&gt;
      &lt;td&gt;Short-lived (stateless)&lt;/td&gt;
      &lt;td&gt;Persistent&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Overhead&lt;/td&gt;
      &lt;td&gt;High (headers in every request)&lt;/td&gt;
      &lt;td&gt;Low (handshake once)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Real-time Updates&lt;/td&gt;
      &lt;td&gt;Requires polling or long-polling&lt;/td&gt;
      &lt;td&gt;Native real-time&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-how-websocket-works&quot;&gt;🔧 How WebSocket Works&lt;/h2&gt;

&lt;h3 id=&quot;step-1-http-handshake&quot;&gt;Step 1: HTTP Handshake&lt;/h3&gt;

&lt;p&gt;It starts with a normal HTTP request:&lt;/p&gt;

&lt;p&gt;GET /chat HTTP/1.1 Host: server.com Upgrade: websocket Connection: Upgrade&lt;/p&gt;

&lt;p&gt;csharp
Copy
Edit&lt;/p&gt;

&lt;p&gt;If the server supports WebSockets, it responds with:&lt;/p&gt;

&lt;p&gt;HTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade&lt;/p&gt;

&lt;p&gt;yaml
Copy
Edit&lt;/p&gt;

&lt;p&gt;Now the connection is &lt;strong&gt;upgraded to WebSocket&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;step-2-real-time-messaging-begins&quot;&gt;Step 2: Real-Time Messaging Begins&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Messages can now be sent in &lt;strong&gt;both directions&lt;/strong&gt; at any time.&lt;/li&gt;
  &lt;li&gt;No need to wait for requests — the server can push data instantly!&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;️-websocket-use-cases&quot;&gt;⚙️ WebSocket Use Cases&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;💬 Chat applications&lt;/li&gt;
  &lt;li&gt;📈 Stock price tickers&lt;/li&gt;
  &lt;li&gt;🎮 Multiplayer gaming&lt;/li&gt;
  &lt;li&gt;🧠 Collaborative editing&lt;/li&gt;
  &lt;li&gt;📡 Live notifications&lt;/li&gt;
  &lt;li&gt;🕐 Real-time dashboards&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-example-code-nodejs&quot;&gt;🛠 Example Code (Node.js)&lt;/h2&gt;

&lt;p&gt;```js
const WebSocket = require(‘ws’);&lt;/p&gt;

&lt;p&gt;const server = new WebSocket.Server({ port: 8080 });&lt;/p&gt;

&lt;p&gt;server.on(‘connection’, socket =&amp;gt; {
  console.log(‘Client connected’);&lt;/p&gt;

&lt;p&gt;socket.on(‘message’, msg =&amp;gt; {
    console.log(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Received: ${msg}&lt;/code&gt;);
    socket.send(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Echo: ${msg}&lt;/code&gt;);
  });&lt;/p&gt;

&lt;p&gt;socket.on(‘close’, () =&amp;gt; {
    console.log(‘Client disconnected’);
  });
});
🚧 Limitations
Not ideal for very short-lived connections&lt;/p&gt;

&lt;p&gt;Can be blocked by some proxies/firewalls&lt;/p&gt;

&lt;p&gt;Requires fallback for older browsers (or use libraries like Socket.IO)&lt;/p&gt;

&lt;p&gt;✅ Alternatives &amp;amp; Protocols
Protocol	When to Use
HTTP	One-time fetches (GET/POST requests)
WebSocket	Persistent, full-duplex communication
SSE (Server Sent Events)	Server → Client only updates
gRPC/WebRTC	Special real-time/peer-to-peer needs
💡 Final Thoughts
WebSockets changed the game by enabling true real-time web applications. They’re lightweight, fast, and perfect for scenarios where latency matters.&lt;/p&gt;

&lt;p&gt;If you’re building anything interactive, collaborative, or instant — it’s time to speak WebSocket.&lt;/p&gt;</content><author><name>Yash Bhoomkar</name><email>bhoomkar04@gmail.com</email></author><category term="networking" /><category term="websockets" /><category term="real-time" /><category term="tcp" /><category term="http" /><category term="socket" /><category term="interview" /><summary type="html">🧠 Introduction</summary></entry><entry><title type="html">What Happens When You Type www.google.com in Your Browser?</title><link href="http://localhost:4000/yashbhoomkar/networking/what-happens-when-you-type-google/" rel="alternate" type="text/html" title="What Happens When You Type www.google.com in Your Browser?" /><published>2024-09-01T09:00:00+05:30</published><updated>2024-09-01T09:00:00+05:30</updated><id>http://localhost:4000/yashbhoomkar/networking/what-happens-when-you-type-google</id><content type="html" xml:base="http://localhost:4000/yashbhoomkar/networking/what-happens-when-you-type-google/">&lt;h2 id=&quot;-introduction&quot;&gt;🧠 Introduction&lt;/h2&gt;

&lt;p&gt;It’s a question every computer science student or aspiring engineer should be able to answer:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What &lt;em&gt;actually&lt;/em&gt; happens when you type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt; into your browser and press &lt;strong&gt;Enter&lt;/strong&gt;?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This blog breaks down the entire process — from keystroke to Google’s response — into understandable steps across networking, operating systems, and browser architecture.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-step-by-step-breakdown&quot;&gt;🧩 Step-by-Step Breakdown&lt;/h2&gt;

&lt;h3 id=&quot;1--url-interpretation&quot;&gt;1. 🧾 URL Interpretation&lt;/h3&gt;

&lt;p&gt;The browser parses the URL:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Scheme: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Host: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Path: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; (default)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It sees it needs a secure connection over HTTPS and prepares for a network request.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;2--dns-resolution&quot;&gt;2. 🔍 DNS Resolution&lt;/h3&gt;

&lt;p&gt;To connect, the browser needs an &lt;strong&gt;IP address&lt;/strong&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checks local &lt;strong&gt;DNS cache&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;If not found, it asks the &lt;strong&gt;OS resolver&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;OS checks:
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Local DNS cache&lt;/li&gt;
      &lt;li&gt;Configured DNS server (e.g. 8.8.8.8)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;➡️ Eventually resolves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt; to something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;142.250.193.68&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;3--tcp-handshake-with-tls&quot;&gt;3. 📶 TCP Handshake (with TLS)&lt;/h3&gt;

&lt;p&gt;Now the browser opens a connection to that IP on port 443 (HTTPS):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Initiates a &lt;strong&gt;3-way TCP handshake&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;SYN →&lt;/li&gt;
      &lt;li&gt;SYN-ACK ←&lt;/li&gt;
      &lt;li&gt;ACK →&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Immediately followed by a &lt;strong&gt;TLS handshake&lt;/strong&gt; for encryption:
    &lt;ul&gt;
      &lt;li&gt;ClientHello, ServerHello&lt;/li&gt;
      &lt;li&gt;Key exchange&lt;/li&gt;
      &lt;li&gt;Certificate verification&lt;/li&gt;
      &lt;li&gt;Encrypted channel established&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;4--sending-the-http-request&quot;&gt;4. 🌐 Sending the HTTP Request&lt;/h3&gt;

&lt;p&gt;The browser sends:
GET / HTTP/1.1 Host: www.google.com User-Agent: Chrome/… Accept: /&lt;/p&gt;

&lt;p&gt;yaml
Copy
Edit&lt;/p&gt;

&lt;p&gt;Over an encrypted TLS connection.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;5-️-server-processes-the-request&quot;&gt;5. 🖥️ Server Processes the Request&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Google’s load balancer receives the request&lt;/li&gt;
  &lt;li&gt;Routes it to a healthy web server&lt;/li&gt;
  &lt;li&gt;The server reads the path, headers, and prepares a response&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;6--http-response-is-sent&quot;&gt;6. 📩 HTTP Response is Sent&lt;/h3&gt;

&lt;p&gt;The server replies with:
HTTP/1.1 200 OK Content-Type: text/html Content-Length: 6000&lt;/p&gt;

&lt;p&gt;yaml
Copy
Edit&lt;/p&gt;

&lt;p&gt;Followed by the actual &lt;strong&gt;HTML document&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;7--browser-renders-the-page&quot;&gt;7. 🧱 Browser Renders the Page&lt;/h3&gt;

&lt;p&gt;The browser:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Parses the HTML&lt;/li&gt;
  &lt;li&gt;Downloads CSS, JS, images (multiple requests)&lt;/li&gt;
  &lt;li&gt;Constructs &lt;strong&gt;DOM + CSSOM → Render Tree&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Renders the page pixel-by-pixel&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-optimization-tricks&quot;&gt;🔁 Optimization Tricks&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Caching&lt;/strong&gt;: DNS, HTTP, and assets (to avoid redundant requests)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Persistent TCP connections&lt;/strong&gt; (via keep-alive)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CDNs&lt;/strong&gt; serve content faster from nearby locations&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Service Workers&lt;/strong&gt; can cache assets offline&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-final-thoughts&quot;&gt;💡 Final Thoughts&lt;/h2&gt;

&lt;p&gt;This seemingly simple action involves:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Browser engine logic&lt;/li&gt;
  &lt;li&gt;OS-level resolution&lt;/li&gt;
  &lt;li&gt;Network stack (TCP/IP, TLS)&lt;/li&gt;
  &lt;li&gt;Server-side processing&lt;/li&gt;
  &lt;li&gt;DOM rendering&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Understanding this process is essential for full-stack, backend, and DevOps engineers.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;🧪 Bonus Tip: Try running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dig www.google.com&lt;/code&gt; or using browser DevTools to see DNS, network timing, and rendering in action!&lt;/p&gt;

&lt;p&gt;Want a deep dive into TCP or TLS next? Drop me a topic!&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Yash Bhoomkar</name><email>bhoomkar04@gmail.com</email></author><category term="networking" /><category term="browser" /><category term="dns" /><category term="tcp" /><category term="http" /><category term="networking" /><category term="interview" /><summary type="html">🧠 Introduction</summary></entry><entry><title type="html">EduBuddy: A Full-Stack Smart Learning Platform</title><link href="http://localhost:4000/yashbhoomkar/full-stack/edtech/edubuddy-fullstack-platform/" rel="alternate" type="text/html" title="EduBuddy: A Full-Stack Smart Learning Platform" /><published>2024-06-01T10:00:00+05:30</published><updated>2024-06-01T10:00:00+05:30</updated><id>http://localhost:4000/yashbhoomkar/full-stack/edtech/edubuddy-fullstack-platform</id><content type="html" xml:base="http://localhost:4000/yashbhoomkar/full-stack/edtech/edubuddy-fullstack-platform/">&lt;h2 id=&quot;-project-overview&quot;&gt;🎯 Project Overview&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;EduBuddy&lt;/strong&gt; is a full-stack smart learning and assessment platform designed to personalize education, track student progress, and foster collaboration. It leverages video-based content, dynamic quizzes, and real-time forums to promote adaptive and accessible learning for all.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-why-edubuddy&quot;&gt;🚀 Why EduBuddy?&lt;/h2&gt;

&lt;p&gt;Traditional educational platforms often fail to accommodate:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Diverse learning styles&lt;/li&gt;
  &lt;li&gt;Real-time analytics&lt;/li&gt;
  &lt;li&gt;Peer-to-peer collaboration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;EduBuddy bridges these gaps by integrating:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;📺 Embedded YouTube videos&lt;/li&gt;
  &lt;li&gt;🧪 Adaptive topic-wise assessments&lt;/li&gt;
  &lt;li&gt;📊 Individual performance tracking&lt;/li&gt;
  &lt;li&gt;💬 Interactive forums&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-tech-stack&quot;&gt;🔧 Tech Stack&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Layer&lt;/th&gt;
      &lt;th&gt;Tech Used&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Frontend&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;React.js&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Backend&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Express.js, Node.js&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Database&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;MongoDB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;APIs&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;YouTube API&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Real-Time&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;WebSocket.io&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Deployment&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Vercel&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-key-features&quot;&gt;⭐ Key Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;🎥 &lt;strong&gt;YouTube-Driven Learning&lt;/strong&gt; — Watch, pause, and resume lessons seamlessly&lt;/li&gt;
  &lt;li&gt;🧠 &lt;strong&gt;Conceptual Assessments&lt;/strong&gt; — Evaluate understanding topic-wise&lt;/li&gt;
  &lt;li&gt;📈 &lt;strong&gt;Performance Dashboards&lt;/strong&gt; — Real-time feedback with visual insights&lt;/li&gt;
  &lt;li&gt;💬 &lt;strong&gt;Discussion Forums&lt;/strong&gt; — Students and mentors can ask, answer, and collaborate&lt;/li&gt;
  &lt;li&gt;👥 &lt;strong&gt;Peer-Created Spaces&lt;/strong&gt; — Create custom discussion threads and topic clusters&lt;/li&gt;
  &lt;li&gt;🚀 &lt;strong&gt;Deployed on Vercel&lt;/strong&gt; — Easy access with zero downtime&lt;/li&gt;
  &lt;li&gt;📱 &lt;strong&gt;Responsive Design&lt;/strong&gt; — Learn on mobile, tablet, or desktop&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-how-it-works&quot;&gt;🔍 How It Works&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Student logs in&lt;/strong&gt; and watches embedded videos through YouTube&lt;/li&gt;
  &lt;li&gt;After each topic, they take assessments&lt;/li&gt;
  &lt;li&gt;Their progress is tracked and displayed&lt;/li&gt;
  &lt;li&gt;If stuck, they can use forums to seek help&lt;/li&gt;
  &lt;li&gt;Results and feedback are instantly visualized&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-benefits&quot;&gt;💡 Benefits&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;📚 Personalized and self-paced learning&lt;/li&gt;
  &lt;li&gt;🌎 Remote access and time flexibility&lt;/li&gt;
  &lt;li&gt;🤝 Strong student-instructor collaboration&lt;/li&gt;
  &lt;li&gt;🔍 Insights into learning gaps&lt;/li&gt;
  &lt;li&gt;👨‍🎓 Encourages ownership in student learning&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-future-enhancements&quot;&gt;📈 Future Enhancements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;🎮 Gamified learning paths&lt;/li&gt;
  &lt;li&gt;📱 Native Android/iOS app&lt;/li&gt;
  &lt;li&gt;📚 LMS integrations (like Moodle, Canvas)&lt;/li&gt;
  &lt;li&gt;🤖 AI-based progress prediction&lt;/li&gt;
  &lt;li&gt;📡 Adaptive content recommendations&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-final-thoughts&quot;&gt;📌 Final Thoughts&lt;/h2&gt;

&lt;p&gt;EduBuddy demonstrates the power of full-stack web development when paired with purpose-driven goals. It’s more than a project — it’s a vision for modern education. By combining scalable tech with learner-centric design, EduBuddy helps bring smart education to everyone.&lt;/p&gt;

&lt;p&gt;Interested in trying out or collaborating on EduBuddy?&lt;br /&gt;
Feel free to connect with me on &lt;a href=&quot;https://www.linkedin.com/in/yashbhoomkar&quot;&gt;LinkedIn&lt;/a&gt; or &lt;a href=&quot;https://github.com/yashbhoomkar&quot;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Yash Bhoomkar</name><email>bhoomkar04@gmail.com</email></author><category term="full-stack" /><category term="edtech" /><category term="react" /><category term="express" /><category term="mongodb" /><category term="fullstack" /><category term="vercel" /><category term="education" /><summary type="html">🎯 Project Overview</summary></entry><entry><title type="html">Debugging 101 - Love Your Bugs</title><link href="http://localhost:4000/yashbhoomkar/tech-views/debugging_guide/" rel="alternate" type="text/html" title="Debugging 101 - Love Your Bugs" /><published>2023-06-10T09:30:45+05:30</published><updated>2023-06-10T09:30:45+05:30</updated><id>http://localhost:4000/yashbhoomkar/tech-views/debugging_guide</id><content type="html" xml:base="http://localhost:4000/yashbhoomkar/tech-views/debugging_guide/">&lt;p&gt;Errors and bugs are a necessary evil in any software developement field, and learning the art of debugging is a very vital step if you want to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improve your developer productivity&lt;/li&gt;
  &lt;li&gt;Write reliable code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article I have tried to document all the debugging methods that I learnt while working on my projects.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/yashbhoomkar/images/bugs.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Whenever you encounter a bug in any of your code/installation it is always helpful to remember the following things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The error happens for a logical reason - its never magic&lt;/li&gt;
  &lt;li&gt;Be confident that you can fix it&lt;/li&gt;
  &lt;li&gt;Being stuck is temporary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you have these 3 things in your toolkit let us proceed for some debugging steps so that you can feel your inherent superpower. :)&lt;/p&gt;

&lt;h2 id=&quot;step-1-read-error-message-carefully&quot;&gt;Step 1: Read error message carefully&lt;/h2&gt;

&lt;p&gt;Error messages usually contain a lot of information about what went wrong. But they sometimes can be very large and overwhelming to read. You can  use these tricks to extract the necessary information from them:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Start fixing the first error message in case of multiple error messages. Fixing the first one often fixes the remaining errors&lt;/li&gt;
  &lt;li&gt;Search if any solution is available on the internet for the error&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-2-brainstorm-possible-reasons-for-the-error&quot;&gt;Step 2: Brainstorm possible reasons for the error&lt;/h2&gt;

&lt;p&gt;Now here I won’t be able to give exact reasons but some examples may include:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Is there something wrong with the server?&lt;/li&gt;
  &lt;li&gt;Am I using correct package version?&lt;/li&gt;
  &lt;li&gt;Have I followed all the instructions?(In case of errors in installations)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After finding possible reasons try to narrow it down to the most possible reason, also draw a diagram of the process if possible&lt;/p&gt;

&lt;h2 id=&quot;step-3-investigate&quot;&gt;Step 3: Investigate&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Read the documentation (Important)&lt;/li&gt;
  &lt;li&gt;Add lots of print statements&lt;/li&gt;
  &lt;li&gt;Use a debugger&lt;/li&gt;
  &lt;li&gt;Look at logs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A meme that highlights the importance of reading the docs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/yashbhoomkar/images/joke.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4-make-complex-things-simple&quot;&gt;Step 4: Make complex things simple&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Fix one problem at a time&lt;/li&gt;
  &lt;li&gt;Write clean code&lt;/li&gt;
  &lt;li&gt;Reduce randomness&lt;/li&gt;
  &lt;li&gt;Shorten your feedback/output loop (when you need to run the code many times)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-5-this-also-helps&quot;&gt;Step 5: This also helps&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Take a break&lt;/li&gt;
  &lt;li&gt;Ask a friend&lt;/li&gt;
  &lt;li&gt;Explain the error/bug out loud&lt;/li&gt;
  &lt;li&gt;Finding tools that make debugging easier - eg. debuggers, profilers, tracers, fuzzers, etc&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;step-6-after-fixing-the-bug&quot;&gt;Step 6: After fixing the bug&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Celebrate - dance a little&lt;/li&gt;
  &lt;li&gt;Tell somebody what you learnt - that way you won’t forget it&lt;/li&gt;
  &lt;li&gt;Document your bug&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;p&gt;Debugging can be an interesting adventure.&lt;/p&gt;

&lt;p&gt;I would like to end this article by quoting Edsger Dijkstra:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;” Program testing can be used to show the presence of bugs, but never to show their absence! “&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Yash Bhoomkar</name><email>bhoomkar04@gmail.com</email></author><category term="tech-views" /><category term="bugs" /><category term="debugging" /><summary type="html">Errors and bugs are a necessary evil in any software developement field, and learning the art of debugging is a very vital step if you want to: Improve your developer productivity Write reliable code In this article I have tried to document all the debugging methods that I learnt while working on my projects. Whenever you encounter a bug in any of your code/installation it is always helpful to remember the following things: The error happens for a logical reason - its never magic Be confident that you can fix it Being stuck is temporary Now that you have these 3 things in your toolkit let us proceed for some debugging steps so that you can feel your inherent superpower. :) Step 1: Read error message carefully Error messages usually contain a lot of information about what went wrong. But they sometimes can be very large and overwhelming to read. You can use these tricks to extract the necessary information from them: Start fixing the first error message in case of multiple error messages. Fixing the first one often fixes the remaining errors Search if any solution is available on the internet for the error Step 2: Brainstorm possible reasons for the error Now here I won’t be able to give exact reasons but some examples may include: Is there something wrong with the server? Am I using correct package version? Have I followed all the instructions?(In case of errors in installations) After finding possible reasons try to narrow it down to the most possible reason, also draw a diagram of the process if possible Step 3: Investigate Read the documentation (Important) Add lots of print statements Use a debugger Look at logs A meme that highlights the importance of reading the docs: Step 4: Make complex things simple Fix one problem at a time Write clean code Reduce randomness Shorten your feedback/output loop (when you need to run the code many times) Step 5: This also helps Take a break Ask a friend Explain the error/bug out loud Finding tools that make debugging easier - eg. debuggers, profilers, tracers, fuzzers, etc Step 6: After fixing the bug Celebrate - dance a little Tell somebody what you learnt - that way you won’t forget it Document your bug Debugging can be an interesting adventure. I would like to end this article by quoting Edsger Dijkstra: ” Program testing can be used to show the presence of bugs, but never to show their absence! “</summary></entry><entry><title type="html">Creating Processes</title><link href="http://localhost:4000/yashbhoomkar/operating%20systems/process-creation/" rel="alternate" type="text/html" title="Creating Processes" /><published>2023-04-25T09:30:45+05:30</published><updated>2023-04-25T09:30:45+05:30</updated><id>http://localhost:4000/yashbhoomkar/operating%20systems/process-creation</id><content type="html" xml:base="http://localhost:4000/yashbhoomkar/operating%20systems/process-creation/">&lt;p&gt;In this article I have tried to explain the important things that happen during a process creation. I always had doubts about&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How a process is created in OS ?&lt;/li&gt;
  &lt;li&gt;From where does it all start ?&lt;/li&gt;
  &lt;li&gt;What happens when you start a process ?&lt;/li&gt;
  &lt;li&gt;What exactly is fork and exec ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us see.&lt;/p&gt;

&lt;h3 id=&quot;process-heirarchy&quot;&gt;Process Heirarchy&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Every process in Linux lives in a “process tree”. You can see that tree by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pstree&lt;/code&gt; in terminal. The root of the tree is init, with PID 1. Every process (except init) has a parent, and any process has many children.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;fork-system-call&quot;&gt;Fork() System Call&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork()&lt;/code&gt; system call is used to create a new process.The new process created by fork is called the child process.This function is called once but returns twice. The only difference in the returns is that the return value in the child is 0, whereas the return value in the parent is the process ID of the new child.The child - the process that is created is an (almost) exact copy of the calling process.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;exec-system-call&quot;&gt;Exec() System Call&lt;/h3&gt;
&lt;p&gt;(Load into memory and then execute)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Fork creates a new process which is a clone of itself, but what if we want to change the course of the process? Then we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec()&lt;/code&gt; syscall. Exec() replaces the current process — its text, data, heap, and stack segments — with a brand-new program from disk.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;on-boot-up&quot;&gt;On Boot Up&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;On boot the kernel starts the init process, which then forks and execs the systems boot scripts. These fork and exec more programs, eventually ending up forking a login process.This is also known as process spawning which is carried out by these two systemcalls [fork &amp;amp; exec] in the background.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;p&gt;Example code snippet of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec()&lt;/code&gt; in a C program:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;am&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;two!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aaaaugh!&lt;/span&gt;
&lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;who&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;am&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;could&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;either&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;am&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;
    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;over&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;totally&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;different&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; 
    &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;omg&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fork&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disaster&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;am&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;business&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;being&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;program&lt;/span&gt;
    &lt;span class=&quot;sr&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;could&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;p&gt;Now, if I want to start a process called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; to list all the files in a directory.
The process starts out like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When I run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork()&lt;/code&gt;, a child is created which is a clone of myself.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt; 
         &lt;span class=&quot;o&quot;&gt;|--&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then my clone calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec()&lt;/code&gt; that is, my child runs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exec(&quot;ls&quot;)&lt;/code&gt;. That leaves us with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt; 
         &lt;span class=&quot;o&quot;&gt;|--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; exits I will be all alone by myself.(Almost)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt; 
         &lt;span class=&quot;o&quot;&gt;|--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zombie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At this point &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; is actually a zombie process! That means it’s dead, but it’s waiting around for the parent in case the parent wants to check on its (child’s) return value (using the wait system call.) Once I get its return value, I will really be all alone again.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;
&lt;hr /&gt;
&lt;p&gt;The following paragraph from &lt;em&gt;Operating Systems:Three Easy Pieces&lt;/em&gt; sums up the gist of the article:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The fork() system call is strange; its partner in crime, exec(), is not
so normal either. What it does: given the name of an executable (e.g., wc),
and some arguments (e.g., p3.c), it loads code (and static data) from that
executable and overwrites its current code segment (and current static
data) with it; the heap and stack and other parts of the memory space of
the program are re-initialized. Then the OS simply runs that program,
passing in any arguments as the argv of that process. Thus, it does not
create a new process; rather, it transforms the currently running program
(formerly p3) into a different running program (wc). After the exec()
in the child, it is almost as if p3.c never ran; a successful call to exec()
never returns.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;references&quot;&gt;References:&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Remzi H. Arpaci-Dusseau_ Andrea C Arpaci-Dusseau - Operating Systems- Three Easy Pieces&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Got this awesome concept from &lt;em&gt;Julia Evans&lt;/em&gt; blog&lt;/p&gt;</content><author><name>Yash Bhoomkar</name><email>bhoomkar04@gmail.com</email></author><category term="operating systems" /><category term="os" /><category term="fork" /><category term="process creation" /><summary type="html">In this article I have tried to explain the important things that happen during a process creation. I always had doubts about How a process is created in OS ? From where does it all start ? What happens when you start a process ? What exactly is fork and exec ?</summary></entry></feed>