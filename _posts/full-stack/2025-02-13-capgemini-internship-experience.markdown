---
layout: single
title: "My Capgemini Internship Experience"
date: 2025-02-13 09:30:00 +0530
categories:
  - full-stack
tags:
  - genai
  - clang
  - ast
  - capgemini
  - productivity
  - python
  - lsp
  - unit-testing
toc: true
classes: wide
---

## Introduction

From October 2024 to February 2025, I had the opportunity to intern with **Capgeminiâ€™s GenAI team** in Pune. Over the course of 4 months, I worked on building a **unit test case curator for C and C++ codebases** that leveraged **Clang AST, Language Servers (LSP), and Generative AI**.

The goal of the project was to boost developer productivity by creating a tool that could automatically generate meaningful unit test cases for any C/C++ function by analyzing the source code and passing relevant context to Capgemini's GenAI engine.

Hereâ€™s a chronological log of the milestones achieved during my internship.

## ðŸ“… Timeline of Work

### âœ… 14 / 10 / 24 â€” Onboarding and Device Collection
On my first day, I completed all formalities related to onboarding. I was issued my work laptop and introduced to internal systems and tools at Capgemini.

---

### âœ… 20 / 10 / 24 â€” Orientation and HR Activities
This day was dedicated to HR inductions, compliance training, and learning about Capgeminiâ€™s core values and culture. It was great to meet fellow interns and understand the scope of various verticals.

---

### âœ… 24 / 10 / 24 â€” Manager Assignment Process
I was officially assigned to the **GenAI team**. I received the name of my reporting manager and was added to internal channels and sprint boards.

---

### âœ… 01 / 11 / 24 â€” Project Knowledge Transfer (KT)
A colleague walked me through an existing prototype and explained Capgemini's internal GenAI socket. We discussed expectations and the current state of the tooling.

---

### âœ… 05 / 11 / 24 â€” Research: Regex-based Parsing
I initially explored using regular expressions to parse code and extract function details. This turned out to be fragile and error-prone for nested or complex C/C++ structures.

---

### âœ… 11 / 11 / 24 â€” Research: GenAI-Based Context Extraction
Shifted focus toward using **GenAI to understand code context** instead of regexes. I started exploring how semantic understanding could make the tool more intelligent.

---

### âœ… 15 / 11 / 24 â€” Manager Sync: My Approach Using AST
I pitched my idea of using **Abstract Syntax Trees (AST)** via **Clang tooling** to parse C/C++ functions and extract precise context. The manager gave green light to proceed.

---

### âœ… 21 / 11 / 24 â€” Team Meeting: Tech Architecture
Presented a detailed technical architecture to the broader GenAI team, discussing how we'd gather function metadata, handle includes, dependencies, and socket communication.

---

### âœ… 28 / 11 / 24 â€” Presentation: My Approach Walkthrough
I gave a structured walkthrough of my AST-based context extractor, demonstrating early results and how weâ€™d connect it with the GenAI engine for test case generation.

---

### âœ… 01 / 12 / 24 â€” Research: Clang AST
Deep-dived into Clangâ€™s AST APIs, experimented with traversal techniques to extract function arguments, local variables, return types, and dependencies.

---

### âœ… 10 / 12 / 24 â€” MVP Presentation
Presented the MVP of the **Unit Test Curator Tool** to my manager. It could now extract clean context blocks for individual functions and output them as structured data.

---

### âœ… 15 / 12 / 24 â€” GenAI Socket Update
Collaborated with the core team to modify the socket protocol to better support test case suggestions and handle varied output lengths from the GenAI engine.

---

### âœ… 01 / 01 / 25 â€” MVP Integration with Code Tester
We integrated the context-extraction module with Capgeminiâ€™s internal code-testing framework. Test cases were now being generated in real-time via the GenAI socket.

---

### âœ… 15 / 01 / 25 â€” Final Tool Integration with GenAI Socket
The full pipeline was in place: from AST context extraction â†’ passing to GenAI â†’ receiving test cases â†’ injecting into testing scaffolds. The tool was ready for team-wide use.

---

### âœ… 01 / 02 / 25 â€” Final Testing & Debugging
Conducted thorough debugging and ran validations on 100+ C/C++ functions. Edge cases, macros, and template handling were tested and optimized.

---

### âœ… 10 / 02 / 25 â€” Final Demo to Senior Director
I showcased the tool in a final demo session to Capgeminiâ€™s Senior Director. Received great feedback on the real-world productivity boost the tool offered to developers.

---

### âœ… 13 / 02 / 25 â€” Last Day and Device Handover
Wrapped up all documentation, submitted my project report, and returned the device. A wonderful learning journey came to an end. âœ¨

---

## ðŸ§  Tech Stack & Tools Used

- **Languages**: Python, C++
- **Compiler Tools**: Clang, LibTooling
- **AST Parsing**: Clang Python Bindings
- **GenAI Integration**: Capgemini GenAI Socket
- **Code Analysis**: Language Server Protocol (LSP)
- **Internal Testing Frameworks**

---

## Final Thoughts

This internship at Capgemini was more than just a corporate stintâ€”it was an intense learning experience. I got hands-on with real-world GenAI applications, explored compiler internals, and improved my understanding of scalable tooling for enterprise codebases.

The project taught me how traditional techniques like ASTs can work hand-in-hand with next-gen GenAI models to solve developer problems more intelligently.

Iâ€™m incredibly grateful to my manager and team for the support and the freedom to explore ideas. Looking forward to what comes next! ðŸš€
